import json
import urllib
from typing import Type, Optional

from pydantic import BaseModel, Field
from superagi.helper.token_counter import TokenCounter
from superagi.llms.base_llm import BaseLlm
from superagi.tools.base_tool import BaseTool
import os
import requests

class InstagramSchema(BaseModel):
    photo_description: str = Field(
        ...,
        description="description of the photo",
    )

class InstagramTool(BaseTool):
    """
    Instagram tool

    Attributes:
        name : The name.
        description : The description.
        args_schema : The args schema.
    """
    llm: Optional[BaseLlm] = None
    name = "Instagram tool"
    description = (
        "A tool performing posting AI generated photos on Instagram"
    )
    args_schema: Type[InstagramSchema] = InstagramSchema

    class Config:
        arbitrary_types_allowed = True

    def _execute(self, photo_description: str) -> str:
        """
        Execute the Instagram tool.

        Args:
            photo_description : description of the photo to be posted

        Returns:
            Image posted successfully message if image has been posted on instagram or error message.
        """
        
        # Set your access token and photo URL
        print("***********************INSTA TOOL CALLED************************")

        meta_user_access_token = self.get_tool_config("META_USER_ACCESS_TOKEN")
        facebook_page_id=self.get_tool_config("FACEBOOK_PAGE_ID")

        if meta_user_access_token is None:
            return "Error: Missing meta user access token."

        if facebook_page_id is None:
            return "Error: Missing facebook page id."

        #create caption for the instagram
        caption=self.create_caption(photo_description)   
        
        #####################

        #functionality to get URL of the image generated by stable diffusion    

        #####################
        
        response=requests.get(
            f"https://graph.facebook.com/v17.0/{facebook_page_id}?fields=instagram_business_account&access_token={meta_user_access_token}"
        )

        if response.status_code != 200:
            return f"Non-200 response: {str(response.text)}"
        print("business_id found****************************")
        data = response.json()
        insta_bussiness_account_id=data["instagram_business_account"]["id"]

        image_url="https://images-cdn.ubuy.co.in/6353b235df14022c3858e456-petfon-pet-gps-tracker-no-monthly-fee.jpg"
        encoded_caption=urllib. parse. quote(caption[1:-1])
        container_gen_url="https://graph.facebook.com/v17.0/"+insta_bussiness_account_id+"/media?image_url="+image_url+"&caption="+encoded_caption+"&access_token="+meta_user_access_token

        response = requests.post(
            container_gen_url
        )

        if response.status_code != 200:
            return f"Non-200 response: {str(response.text)}"
        print("container_ID generated****************************")

        data = response.json()
        container_ID=data["id"]
        response = requests.post(
            f"https://graph.facebook.com/v17.0/{insta_bussiness_account_id}/media_publish?creation_id={container_ID}&access_token={meta_user_access_token}",
        )
        
        if response.status_code != 200:
            return f"Non-200 response: {str(response.text)}"
    
        return "Photo posted successfully!"
    
    def create_caption(self, photo_description: str) -> str:
        """
        Create a caption for the instagram post based on the photo description

        Args:
            photo_description : Description of the photo to be posted

        Returns:
            Description of the photo to be posted
        """
        caption_prompt ="""Generate an instagram post caption for the following text `{photo_description}`
            Write a concise as necessary and attempt to make it relevant to the description as best as possible. Add emojis if needed."""

        caption_prompt = caption_prompt.replace("{photo_description}", str(photo_description))

        messages = [{"role": "system", "content": caption_prompt}]
        result = self.llm.chat_completion(messages, max_tokens=self.max_token_limit)
        caption=result["content"]

        return caption